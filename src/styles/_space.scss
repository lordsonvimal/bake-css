// Note: Border width (px) - Relative border width is ugly.
// Icon size (em) - When inline with text.
// Margin for typography (rem) - Case for margin between heading and paragraph.
// Padding for typography (em) - Case for different button size.
// Font size (em or %) - Case for heading font size and secondary font size.
// Root font size (px) - It is the root! Why bother with relative units? Relative to what??
// Line height (em or rem) - Because it needs to be relative to the font size. Unless you want to set a vertical rhythm and such.
// https://dev.to/theodorusclarence/back-to-basic-should-we-use-rem-em-or-pixel-1hd0
@use "sass:map";

$multiplier: 4;
$count: 7;

@function get_spaces() {
  $spaces: ();
  @for $i from 0 to $count + 1 {
    $new_space: ($i: $i * $multiplier);
    $spaces: map.merge($spaces, $new_space);
  }
  @return $spaces;
}

@function get_margin_padding_values($spaces) {
  $spaces: map.merge($spaces, ("a": "auto"));
  $spaces: map.merge($spaces, ("u": "unset"));
  @return $spaces;
}

@mixin set_space($style, $property, $spaces) {
  @each $key, $space in $spaces {
    .#{$style}#{$key} {
      #{$property}: #{$space}px;
    }
  }
  .#{$style}u {
    #{$property}: unset;
  }
  .#{$style}a {
    #{$property}: auto;
  }
}

$spaces: get_spaces();

// Margins
@include set_space("ml", "margin-left", $spaces);
@include set_space("mr", "margin-right", $spaces);
@include set_space("mt", "margin-top", $spaces);
@include set_space("mt", "margin-bottom", $spaces);
@include set_space("mi", "margin-inline", $spaces);

// Paddings
@include set_space("pl", "padding-left", $spaces);
@include set_space("pr", "padding-right", $spaces);
@include set_space("pt", "padding-top", $spaces);
@include set_space("pt", "padding-bottom", $spaces);
@include set_space("pi", "padding-inline", $spaces);
