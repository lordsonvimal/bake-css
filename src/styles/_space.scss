// Note: Border width (px) - Relative border width is ugly.
// Icon size (em) - When inline with text.
// Margin for typography (rem) - Case for margin between heading and paragraph.
// Padding for typography (em) - Case for different button size.
// Font size (em or %) - Case for heading font size and secondary font size.
// Root font size (px) - It is the root! Why bother with relative units? Relative to what??
// Line height (em or rem) - Because it needs to be relative to the font size. Unless you want to set a vertical rhythm and such.
// https://dev.to/theodorusclarence/back-to-basic-should-we-use-rem-em-or-pixel-1hd0
@use "sass:map";
@use "./mixins";

$multiplier: 4;
$count: 7;

$additional_spaces: (
  "a": auto,
  "u": unset
);

@function get_spaces() {
  $spaces: ();
  @for $i from 0 to $count + 1 {
    $spaces: map.merge($spaces, ($i * $multiplier: #{$i * $multiplier}px));
  }
  $spaces: map.merge($spaces, $additional_spaces);
  @return $spaces;
}

$spaces: get_spaces();

// Margins
@include mixins.create_class("m", "margin", $spaces);
@include mixins.create_class("mi", "margin-inline", $spaces);
@include mixins.create_class("ml", "margin-left", $spaces);
@include mixins.create_class("mr", "margin-right", $spaces);
@include mixins.create_class("mt", "margin-top", $spaces);
@include mixins.create_class("mb", "margin-bottom", $spaces);

// Paddings
@include mixins.create_class("p", "padding", $spaces);
@include mixins.create_class("pi", "padding-inline", $spaces);
@include mixins.create_class("pl", "padding-left", $spaces);
@include mixins.create_class("pr", "padding-right", $spaces);
@include mixins.create_class("pt", "padding-top", $spaces);
@include mixins.create_class("pb", "padding-bottom", $spaces);
